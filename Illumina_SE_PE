

Step	Tool	Purpose
1	cat	Concatenate FASTQ
2	Trimmomatic	Trim adapters, low-quality reads
3	FastQC + MultiQC	QC
4	wget	Download reference
5	BWA + Samtools	Map reads
6	SPAdes	De novo assembly
7	Pilon	Polish
8	Prokka	Annotate
9	MLST, abricate	Typing
10	Kraken2	Species ID
11	Roary + IQ-TREE	Pangenome + phylogeny


🧬 1️⃣ Concatenate gzipped FASTQ files

👉 Why: If you have multiple FASTQ files per barcode/run (e.g., from different lanes), you often concatenate them into a single file.

Example: Combine all barcode01 FASTQs.

🔹 Single-End:

cat barcode01/*.fastq.gz > barcode01_SE.fastq.gz

🔹 Paired-End:
Combine R1 files and R2 files separately.

cat barcode01/*_R1_*.fastq.gz > barcode01_R1.fastq.gz
cat barcode01/*_R2_*.fastq.gz > barcode01_R2.fastq.gz

✂️ 2️⃣ Trimming with Trimmomatic

👉 Why: Remove adapters, low-quality bases, short reads.

🔹 Single-End:

trimmomatic SE -threads 4 \
  barcode01_SE.fastq.gz barcode01_SE_trimmed.fastq.gz \
  ILLUMINACLIP:TruSeq3-SE.fa:2:30:10 LEADING:3 TRAILING:3 SLIDINGWINDOW:4:20 MINLEN:36

🔹 Paired-End:

trimmomatic PE -threads 4 \
  barcode01_R1.fastq.gz barcode01_R2.fastq.gz \
  barcode01_R1_trimmed_paired.fastq.gz barcode01_R1_trimmed_unpaired.fastq.gz \
  barcode01_R2_trimmed_paired.fastq.gz barcode01_R2_trimmed_unpaired.fastq.gz \
  ILLUMINACLIP:TruSeq3-PE.fa:2:30:10 LEADING:3 TRAILING:3 SLIDINGWINDOW:4:20 MINLEN:36

✅ 3️⃣ Quality check with FastQC + MultiQC

👉 Why: Visual QC of raw and trimmed reads.

Run FastQC:

🔹 Single-End:

fastqc barcode01_SE_trimmed.fastq.gz -o qc_reports/

🔹 Paired-End:

fastqc barcode01_R1_trimmed_paired.fastq.gz barcode01_R2_trimmed_paired.fastq.gz -o qc_reports/

Combine reports with MultiQC:

multiqc qc_reports/ -o qc_reports/

📥 4️⃣ Download Salmonella enterica LT2 reference

👉 Why: For mapping and polishing.

# Download reference genome FASTA and GFF from NCBI
wget ftp://ftp.ncbi.nlm.nih.gov/genomes/all/GCF/000/006/945/GCF_000006945.2_ASM694v2/GCF_000006945.2_ASM694v2_genomic.fna.gz


# Unzip
gunzip GCF_000006945.2_ASM694v2_genomic.fna.gz


🗂️ 5️⃣ Mapping with BWA + Samtools

👉 Why: Align reads to reference.

    Index the reference:

bwa index GCF_000006945.2_ASM694v2_genomic.fna

    Align:

🔹 Single-End:

bwa mem -t 4 GCF_000006945.2_ASM694v2_genomic.fna barcode01_SE_trimmed.fastq.gz | samtools view -Sb - > barcode01.bam

🔹 Paired-End:

bwa mem -t 4 GCF_000006945.2_ASM694v2_genomic.fna barcode01_R1_trimmed_paired.fastq.gz barcode01_R2_trimmed_paired.fastq.gz | samtools view -Sb - > barcode01.bam

    Sort + index:

samtools sort barcode01.bam -o barcode01_sorted.bam
samtools index barcode01_sorted.bam

🧩 6️⃣ De novo assembly with SPAdes

👉 Why: Assemble genomes without a reference.

🔹 Single-End:

spades.py -s barcode01_SE_trimmed.fastq.gz -o spades_output/ -t 4

🔹 Paired-End:

spades.py -1 barcode01_R1_trimmed_paired.fastq.gz -2 barcode01_R2_trimmed_paired.fastq.gz -o spades_output/ -t 4

🔬 7️⃣ Polishing with Pilon

👉 Why: Correct assembly errors using mapped reads.

# Index contigs
bwa index spades_output/scaffolds.fasta

# Map reads to contigs
bwa mem -t 4 spades_output/scaffolds.fasta barcode01_R1_trimmed_paired.fastq.gz barcode01_R2_trimmed_paired.fastq.gz | samtools view -Sb - > pilon.bam
samtools sort pilon.bam -o pilon_sorted.bam
samtools index pilon_sorted.bam

# Run Pilon
pilon --genome spades_output/scaffolds.fasta --frags pilon_sorted.bam --output pilon_polished --threads 4

🧾 8️⃣ Annotation with Prokka

👉 Why: Identify genes, rRNAs, tRNAs, features.

prokka --outdir prokka_output --prefix barcode01 pilon_polished.fasta

🧬 9️⃣ Typing (MLST, AMR, plasmids, virulence)

👉 Use mlst, abricate, plasmidfinder

# MLST
mlst pilon_polished.fasta

#############################################################################################################################################

AMR

for i in {29..43}; do abricate --db resfinder prokka_annotation/S${i}/S${i}.gff > amr/S${i}_amr.tab; done

#####################################################################################################################################################

PLASMIDS

for i in {29..43}; do abricate --db plasmidfinder prokka_annotation/S${i}/S${i}.gff > plasmid/S${i}_plasmid.tab; done
############################################################################################################################

VIRULENCE

for i in {29..43}; do abricate --db vfdb prokka_annotation/S${i}/S${i}.gff > virulence/S${i}_virulence.tab; done

#########################################################################################################################################################

# AMR + virulence + plasmids with abricate
abricate --db resfinder pilon_polished.fasta > abricate_resfinder.txt
abricate --db virulencefinder pilon_polished.fasta > abricate_virulence.txt
abricate --db plasmidfinder pilon_polished.fasta > abricate_plasmids.txt

🧭 🔟 Species ID with Centrifuge or Kraken2

👉 Kraken2 example:

kraken2 --db /path/to/kraken_db --threads 4 --report kraken_report.txt --output kraken_output.txt pilon_polished.fasta

🌳 1️⃣1️⃣ Pangenome + phylogenetics

👉 Roary for core genome alignment → IQ-TREE for tree

    Roary (multiple samples)
    Put all .gff files in one folder:

roary -e -n -v *.gff

    IQ-TREE:

iqtree -s core_gene_alignment.aln -nt AUTO -m GTR+G -bb 1000 -redo

*************************************************************************************************************************************************************************************************





    Single-end & paired-end,

Tools:

cat • trimmomatic • fastqc • multiqc • wget • bwa + samtools • spades • pilon • prokka • mlst • abricate • kraken2 or centrifuge • roary • iqtree
🔹 1️⃣ Concatenate FASTQ files

👉 Purpose: Merge multiple .fastq files for the same barcode/sample.

📍 SINGLE-END

cat barcode01/*.fastq > barcode01_SE.fastq

📍 PAIRED-END

Assume file names include _R1_ and _R2_ to distinguish read pairs.

# Forward reads
cat barcode01/*_R1_*.fastq > barcode01_R1.fastq

# Reverse reads
cat barcode01/*_R2_*.fastq > barcode01_R2.fastq

✂️ 2️⃣ Quality Trimming — Trimmomatic

👉 Purpose: Remove adapters, low-quality ends, short reads.

📍 SINGLE-END

trimmomatic SE -threads 4 \
  barcode01_SE.fastq barcode01_SE_trimmed.fastq \
  ILLUMINACLIP:TruSeq3-SE.fa:2:30:10 \
  LEADING:3 TRAILING:3 SLIDINGWINDOW:4:20 MINLEN:36

📍 PAIRED-END

trimmomatic PE -threads 4 \
  barcode01_R1.fastq barcode01_R2.fastq \
  barcode01_R1_trimmed_paired.fastq barcode01_R1_trimmed_unpaired.fastq \
  barcode01_R2_trimmed_paired.fastq barcode01_R2_trimmed_unpaired.fastq \
  ILLUMINACLIP:TruSeq3-PE.fa:2:30:10 \
  LEADING:3 TRAILING:3 SLIDINGWINDOW:4:20 MINLEN:36

✅ 3️⃣ Quality Control — FastQC + MultiQC

👉 Purpose: Generate QC reports for trimmed reads.

📍 SINGLE-END

fastqc barcode01_SE_trimmed.fastq -o qc_reports/

📍 PAIRED-END

fastqc barcode01_R1_trimmed_paired.fastq barcode01_R2_trimmed_paired.fastq -o qc_reports/

Combine all QC reports

multiqc qc_reports/ -o qc_reports/

📥 4️⃣ Download Salmonella enterica LT2 reference

👉 Purpose: Get the reference genome for mapping and polishing.

wget ftp://ftp.ncbi.nlm.nih.gov/genomes/all/GCF/000/006/945/GCF_000006945.2_ASM694v2/GCF_000006945.2_ASM694v2_genomic.fna.gz
wget ftp://ftp.ncbi.nlm.nih.gov/genomes/all/GCF/000/006/945/GCF_000006945.2_ASM694v2/GCF_000006945.2_ASM694v2_genomic.gff.gz

# Uncompress
gunzip GCF_000006945.2_ASM694v2_genomic.fna.gz
gunzip GCF_000006945.2_ASM694v2_genomic.gff.gz

🗂️ 5️⃣ Mapping — BWA + Samtools

👉 Purpose: Map trimmed reads to the reference.

1️⃣ Index reference

bwa index GCF_000006945.2_ASM694v2_genomic.fna

2️⃣ Map

📍 SINGLE-END

bwa mem -t 4 GCF_000006945.2_ASM694v2_genomic.fna barcode01_SE_trimmed.fastq | samtools view -Sb - > barcode01.bam

📍 PAIRED-END

bwa mem -t 4 GCF_000006945.2_ASM694v2_genomic.fna barcode01_R1_trimmed_paired.fastq barcode01_R2_trimmed_paired.fastq | samtools view -Sb - > barcode01.bam

3️⃣ Sort & index

samtools sort barcode01.bam -o barcode01_sorted.bam
samtools index barcode01_sorted.bam

🧩 6️⃣ De novo Assembly — SPAdes

👉 Purpose: Build genome contigs from reads (without reference).

📍 SINGLE-END

spades.py -s barcode01_SE_trimmed.fastq -o spades_output/ -t 4

📍 PAIRED-END

spades.py -1 barcode01_R1_trimmed_paired.fastq -2 barcode01_R2_trimmed_paired.fastq -o spades_output/ -t 4

🧽 7️⃣ Polishing — Pilon

👉 Purpose: Correct assembly errors using mapped reads.

1️⃣ Map reads back to assembly

bwa index spades_output/scaffolds.fasta

📍 SINGLE-END

bwa mem -t 4 spades_output/scaffolds.fasta barcode01_SE_trimmed.fastq | samtools view -Sb - > pilon.bam

📍 PAIRED-END

bwa mem -t 4 spades_output/scaffolds.fasta barcode01_R1_trimmed_paired.fastq barcode01_R2_trimmed_paired.fastq | samtools view -Sb - > pilon.bam

2️⃣ Sort & index

samtools sort pilon.bam -o pilon_sorted.bam
samtools index pilon_sorted.bam

3️⃣ Run Pilon

pilon --genome spades_output/scaffolds.fasta --frags pilon_sorted.bam --output pilon_polished --threads 4

🧬 8️⃣ Annotation — Prokka

👉 Purpose: Identify genes and features.

prokka --outdir prokka_output --prefix barcode01 pilon_polished.fasta

🧾 9️⃣ Typing — MLST, AMR, plasmids, virulence

👉 Purpose: Determine sequence type, resistance, plasmids, virulence factors.

# MLST
mlst pilon_polished.fasta

# AMR, virulence, plasmids — abricate
abricate --db resfinder pilon_polished.fasta > abricate_resfinder.txt
abricate --db virulencefinder pilon_polished.fasta > abricate_virulence.txt
abricate --db plasmidfinder pilon_polished.fasta > abricate_plasmids.txt

🧭 🔟 Species ID — Kraken2 or Centrifuge

👉 Purpose: Confirm species ID

kraken2 --db /path/to/kraken_db --threads 4 --report kraken_report.txt --output kraken_output.txt pilon_polished.fasta

🌳 1️⃣1️⃣ Pangenome + Phylogenetics

👉 Purpose: Core genome alignment + tree.

Roary

# Gather all .gff files (one per sample)
roary -e -n -v *.gff

IQ-TREE

iqtree -s core_gene_alignment.aln -nt AUTO -m GTR+G -bb 1000 -redo

*******************************************************************************************************************************************************************************************************

Step	Tool	Purpose
1	cat	Concatenate FASTQ
2	Trimmomatic	Trim adapters, low-quality reads
3	FastQC + MultiQC	QC
4	wget	Download reference
5	BWA + Samtools	Map reads
6	SPAdes	De novo assembly
7	Pilon	Polish
8	Prokka	Annotate
9	MLST, abricate	Typing
10	Kraken2	Species ID
11	Roary + IQ-TREE	Pangenome + phylogeny


🧬 1️⃣ Concatenate gzipped FASTQ files

👉 Why: If you have multiple FASTQ files per barcode/run (e.g., from different lanes), you often concatenate them into a single file.

Example: Combine all barcode01 FASTQs.

🔹 Single-End:

cat barcode01/*.fastq.gz > barcode01_SE.fastq.gz

🔹 Paired-End:
Combine R1 files and R2 files separately.

cat barcode01/*_R1_*.fastq.gz > barcode01_R1.fastq.gz
cat barcode01/*_R2_*.fastq.gz > barcode01_R2.fastq.gz

✂️ 2️⃣ Trimming with Trimmomatic

👉 Why: Remove adapters, low-quality bases, short reads.

🔹 Single-End:

trimmomatic SE -threads 4 \
  barcode01_SE.fastq.gz barcode01_SE_trimmed.fastq.gz \
  ILLUMINACLIP:TruSeq3-SE.fa:2:30:10 LEADING:3 TRAILING:3 SLIDINGWINDOW:4:20 MINLEN:36

🔹 Paired-End:

trimmomatic PE -threads 4 \
  barcode01_R1.fastq.gz barcode01_R2.fastq.gz \
  barcode01_R1_trimmed_paired.fastq.gz barcode01_R1_trimmed_unpaired.fastq.gz \
  barcode01_R2_trimmed_paired.fastq.gz barcode01_R2_trimmed_unpaired.fastq.gz \
  ILLUMINACLIP:TruSeq3-PE.fa:2:30:10 LEADING:3 TRAILING:3 SLIDINGWINDOW:4:20 MINLEN:36

✅ 3️⃣ Quality check with FastQC + MultiQC

👉 Why: Visual QC of raw and trimmed reads.

Run FastQC:

🔹 Single-End:

fastqc barcode01_SE_trimmed.fastq.gz -o qc_reports/

🔹 Paired-End:

fastqc barcode01_R1_trimmed_paired.fastq.gz barcode01_R2_trimmed_paired.fastq.gz -o qc_reports/

Combine reports with MultiQC:

multiqc qc_reports/ -o qc_reports/

📥 4️⃣ Download Salmonella enterica LT2 reference

👉 Why: For mapping and polishing.

# Download reference genome FASTA and GFF from NCBI
wget ftp://ftp.ncbi.nlm.nih.gov/genomes/all/GCF/000/006/945/GCF_000006945.2_ASM694v2/GCF_000006945.2_ASM694v2_genomic.fna.gz
wget ftp://ftp.ncbi.nlm.nih.gov/genomes/all/GCF/000/006/945/GCF_000006945.2_ASM694v2/GCF_000006945.2_ASM694v2_genomic.gff.gz

# Unzip
gunzip GCF_000006945.2_ASM694v2_genomic.fna.gz
gunzip GCF_000006945.2_ASM694v2_genomic.gff.gz

🗂️ 5️⃣ Mapping with BWA + Samtools

👉 Why: Align reads to reference.

    Index the reference:

bwa index GCF_000006945.2_ASM694v2_genomic.fna

    Align:

🔹 Single-End:

bwa mem -t 4 GCF_000006945.2_ASM694v2_genomic.fna barcode01_SE_trimmed.fastq.gz | samtools view -Sb - > barcode01.bam

🔹 Paired-End:

bwa mem -t 4 GCF_000006945.2_ASM694v2_genomic.fna barcode01_R1_trimmed_paired.fastq.gz barcode01_R2_trimmed_paired.fastq.gz | samtools view -Sb - > barcode01.bam

    Sort + index:

samtools sort barcode01.bam -o barcode01_sorted.bam
samtools index barcode01_sorted.bam

🧩 6️⃣ De novo assembly with SPAdes

👉 Why: Assemble genomes without a reference.

🔹 Single-End:

spades.py -s barcode01_SE_trimmed.fastq.gz -o spades_output/ -t 4

🔹 Paired-End:

spades.py -1 barcode01_R1_trimmed_paired.fastq.gz -2 barcode01_R2_trimmed_paired.fastq.gz -o spades_output/ -t 4

🔬 7️⃣ Polishing with Pilon

👉 Why: Correct assembly errors using mapped reads.

# Index contigs
bwa index spades_output/scaffolds.fasta

# Map reads to contigs
bwa mem -t 4 spades_output/scaffolds.fasta barcode01_R1_trimmed_paired.fastq.gz barcode01_R2_trimmed_paired.fastq.gz | samtools view -Sb - > pilon.bam
samtools sort pilon.bam -o pilon_sorted.bam
samtools index pilon_sorted.bam

# Run Pilon
pilon --genome spades_output/scaffolds.fasta --frags pilon_sorted.bam --output pilon_polished --threads 4

🧾 8️⃣ Annotation with Prokka

👉 Why: Identify genes, rRNAs, tRNAs, features.

prokka --outdir prokka_output --prefix barcode01 pilon_polished.fasta

🧬 9️⃣ Typing (MLST, AMR, plasmids, virulence)

👉 Use mlst, abricate, plasmidfinder

# MLST
mlst pilon_polished.fasta

# AMR + virulence + plasmids with abricate
abricate --db resfinder pilon_polished.fasta > abricate_resfinder.txt
abricate --db virulencefinder pilon_polished.fasta > abricate_virulence.txt
abricate --db plasmidfinder pilon_polished.fasta > abricate_plasmids.txt

🧭 🔟 Species ID with Centrifuge or Kraken2

👉 Kraken2 example:

kraken2 --db /path/to/kraken_db --threads 4 --report kraken_report.txt --output kraken_output.txt pilon_polished.fasta

🌳 1️⃣1️⃣ Pangenome + phylogenetics

👉 Roary for core genome alignment → IQ-TREE for tree

    Roary (multiple samples)
    Put all .gff files in one folder:

roary -e -n -v *.gff

    IQ-TREE:

iqtree -s core_gene_alignment.aln -nt AUTO -m GTR+G -bb 1000 -redo



*************************************************************************************************************************************************************************************************************************************

📌 PAIRED END_Pipeline Overview


Tools:

zcat • trimmomatic • fastqc • multiqc • wget • bwa + samtools • spades • pilon • prokka • mlst • abricate • kraken2 or centrifuge • roary • iqtree


Step	Tool	Purpose
1	zcat	Concatenate FASTQ
2	Trimmomatic	Trim adapters, low-quality reads
3	FastQC + MultiQC	QC
4	wget	Download reference
5	BWA + Samtools	Map reads
6	SPAdes	De novo assembly
7	Pilon	Polish
8	Prokka	Annotate
9	MLST, abricate	Typing
10	Kraken2	Species ID
11	Roary + IQ-TREE	Pangenome + phylogeny

CREATE AWORKING SPACE

mkdir salmonella_illumina_04072025

cd salmonella_illumina_04072025

mkdir gzipped_fastq
Mkir concatenated_fastq
mkdir trimmed
mkdir qc_report
mkdir reference
mkdir mapped_samtools
mkdir denovo_spade
mkdir polished_pilon
mkdir annotated_prokka
mkdir mlst
mkdir amr
mkdir plasmid
mkdir virulence
mkdir spid_kraken

🔹 1️⃣ Concatenate FASTQ files

👉 Purpose: Merge multiple .fastq files for the same barcode/sample.


📍 PAIRED-END

Assume file names include _R1_ and _R2_ to distinguish read pairs.

Make output directory

mkdir  concatenated_fastq

# === Sample 01 ===
# Concatenate all R1 reads for sample01
zcat sample01_R1_*.fastq.gz > concatenated_fastq/sample01_R1.fastq

# Concatenate all R2 reads for sample01
zcat sample01_R2_*.fastq.gz > concatenated_fastq/sample01_R2.fastq

# === Sample 02 ===
zcat sample02_R1_*.fastq.gz > concatenated_fastq/sample02_R1.fastq
zcat sample02_R2_*.fastq.gz > concatenated_fastq/sample02_R2.fastq

# === Sample 03 ===
zcat sample03_R1_*.fastq.gz > concatenated_fastq/sample03_R1.fastq
zcat sample03_R2_*.fastq.gz > concatenated_fastq/sample03_R2.fastq


✂️ 2️⃣ Quality Trimming — Trimmomatic

👉 Purpose: Remove adapters, low-quality ends, short reads.


📍 PAIRED-END

trimmomatic PE -threads 4 \
  barcode01_R1.fastq barcode01_R2.fastq \
  barcode01_R1_trimmed_paired.fastq barcode01_R1_trimmed_unpaired.fastq \
  barcode01_R2_trimmed_paired.fastq barcode01_R2_trimmed_unpaired.fastq \
  ILLUMINACLIP:TruSeq3-PE.fa:2:30:10 \
  LEADING:3 TRAILING:3 SLIDINGWINDOW:4:20 MINLEN:36

#########################################################################################################
trimmomatic PE -threads 4 fastq/S04_R1_001.fastq fastq/S04_R2_001.fastq S04_R1_001paired.fastq S04_R1_001unpaired.fastq S04_R2_001paired.fastq S04_R2_001unpaired.fastq ILLUMINACLIP:/home/greatlife1/Trimmomatic-0.39/adapters/TruSeq3-PE.fa:2:30:10 LEADING:3 TRAILING:3 SLIDINGWINDOW:4:20 MINLEN:36
#######################################################################################################################



✅ 3️⃣ Quality Control — FastQC + MultiQC

👉 Purpose: Generate QC reports for trimmed reads.


📍 PAIRED-END

fastqc barcode01_R1_trimmed_paired.fastq barcode01_R2_trimmed_paired.fastq -o qc_reports/

Combine all QC reports

multiqc qc_reports/ -o qc_reports/

📥 4️⃣ Download Salmonella enterica LT2 reference

👉 Purpose: Get the reference genome for mapping and polishing.


wget ftp://ftp.ncbi.nlm.nih.gov/genomes/all/GCF/000/006/945/GCF_000006945.2_ASM694v2/GCF_000006945.2_ASM694v2_genomic.gff.gz

# Uncompress
gunzip GCF_000006945.2_ASM694v2_genomic.fna.gz
gunzip GCF_000006945.2_ASM694v2_genomic.gff.gz

🗂️ 5️⃣ Mapping — BWA + Samtools

👉 Purpose: Map trimmed reads to the reference.

1️⃣ Index reference

bwa index GCF_000006945.2_ASM694v2_genomic.fna

2️⃣ Map


📍 PAIRED-END

bwa mem -t 4 GCF_000006945.2_ASM694v2_genomic.fna barcode01_R1_trimmed_paired.fastq barcode01_R2_trimmed_paired.fastq | samtools view -Sb - > barcode01.bam

3️⃣ Sort & index

samtools sort barcode01.bam -o barcode01_sorted.bam
samtools index barcode01_sorted.bam

#################################################################################################################################################

bwa index Salmonella_enterica_ref_genome/GCF_000006945.2_ASM694v2_genomic.fna && bwa mem -t 8 Salmonella_enterica_ref_genome/GCF_000006945.2_ASM694v2_genomic.fna trimmomatic_trimmed_fastq/S04/S04_R1_001paired.fastq trimmomatic_trimmed_fastq/S04/S04_R2_001paired.fastq | samtools view -bS - | samtools sort -o S04_sorted.bam && samtools index S04_sorted.bam && bcftools mpileup -Ou -f Salmonella_enterica_ref_genome/GCF_000006945.2_ASM694v2_genomic.fna S04_sorted.bam | bcftools call -mv -Oz -o S04_variants.vcf.gz && bcftools index S04_variants.vcf.gz && bcftools consensus -f Salmonella_enterica_ref_genome/GCF_000006945.2_ASM694v2_genomic.fna S04_variants.vcf.gz > S04_consensus.fasta

#####################################################################################################################################################################

🧩 6️⃣ De novo Assembly — SPAdes

👉 Purpose: Build genome contigs from reads (without reference).


📍 PAIRED-END

spades.py -1 barcode01_R1_trimmed_paired.fastq -2 barcode01_R2_trimmed_paired.fastq -o spades_output/ -t 4

##########################################################################################################################



pades.py -1 trimmomatic_trimmed_fastq/S30/S30_R1_001paired.fastq -2 trimmomatic_trimmed_fastq/S30/S30_R2_001paired.fastq -o spades_denovo_assembled/S30 -t 4



#########################################################################################################################



ASSEMBLERS FOR METAGENOMICS

megahit



megahit -1 S28_R1.trimmed.fastq -2 S28_R2.trimmed.fastq \
   -o S28_megahit_out -t 16


###############################################################################################################################


TAXONOMY ID AND STEPS



SPEP 1:

kraken --db /home/greatlife1/kraken_db --fasta-input S28_megahit_out/final.contigs.fa \
--output S28.kraken.out




Step2:kraken-report --db /home/greatlife1/kraken_db S28.kraken.out > S28.kraken.report


#


🧽 7️⃣ Polishing — Pilon

👉 Purpose: Correct assembly errors using mapped reads.

1️⃣ Map reads back to assembly

bwa index spades_output/scaffolds.fasta


📍 PAIRED-END

bwa mem -t 4 spades_output/scaffolds.fasta barcode01_R1_trimmed_paired.fastq barcode01_R2_trimmed_paired.fastq | samtools view -Sb - > pilon.bam

2️⃣ Sort & index

samtools sort pilon.bam -o pilon_sorted.bam
samtools index pilon_sorted.bam

3️⃣ Run Pilon

pilon --genome spades_output/scaffolds.fasta --frags pilon_sorted.bam --output pilon_polished --threads 4

🧬 8️⃣ Annotation — Prokka

👉 Purpose: Identify genes and features.

prokka --outdir prokka_output --prefix barcode01 pilon_polished.fasta

🧾 9️⃣ Typing — MLST, AMR, plasmids, virulence

👉 Purpose: Determine sequence type, resistance, plasmids, virulence factors.

# MLST
mlst pilon_polished.fasta

# AMR, virulence, plasmids — abricate
abricate --db resfinder pilon_polished.fasta > abricate_resfinder.txt
abricate --db virulencefinder pilon_polished.fasta > abricate_virulence.txt
abricate --db plasmidfinder pilon_polished.fasta > abricate_plasmids.txt

🧭 🔟 Species ID — Kraken2 or Centrifuge

👉 Purpose: Confirm species ID

kraken2 --db /path/to/kraken_db --threads 4 --report kraken_report.txt --output kraken_output.txt pilon_polished.fasta



################################################################################################################################################

KRAKEN FOR DENOVO ASSEMBLY


kraken --db /home/greatlife1/kraken_db --threads 8 --fastq-input --paired spades_denovo_assembled/S06/corrected/S06_R1_001paired.00.0_0.cor.fastq spades_denovo_assembled/S06/corrected/S06_R2_001paired.00.0_0.cor.fastq --output taxonomy_kraken/S06_kraken_output.txt && kraken-report --db /home/greatlife1/kraken_db taxonomy_kraken/S06_kraken_output.txt > taxonomy_kraken/S06_kraken_report.txt

####################################################################################################################################################







KRAKEN AFTER DENOVO ASSEMBLY USING MEGAHIT



for i in {29..43}; do echo "Processing Sample S$i..."; kraken --db /home/greatlife1/kraken_db --fasta-input S${i}_megahit_out/final.contigs.fa --output S${i}.kraken.out && kraken-report --db /home/greatlife1/kraken_db S${i}.kraken.out > S${i}.kraken.report; done


##############################################################################################################################################################


🌳 1️⃣1️⃣ Pangenome + Phylogenetics

👉 Purpose: Core genome alignment + tree.

Roary

# Gather all .gff files (one per sample)
roary -e -n -v *.gff

IQ-TREE

iqtree -s core_gene_alignment.aln -nt AUTO -m GTR+G -bb 1000 -redo

